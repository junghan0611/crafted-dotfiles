# -*- coding: utf-8-unix; -*-
# -*- eval: evil-lookup-func: helpful-at-point; -*-
:DOC-CONFIG:
#+property: header-args :tangle no :results silent :eval no-export
#+property: header-args:emacs-lisp :tangle no
#+property: header-args :mkdirp yes :comments no
#+property: header-args:elisp :exports code
:END:
#+title: Jh-Crated-Emacs Configuration
#+author: Junghan Kim
#+email: junghanacs@gmail.com
#+language: ko
#+startup: fold
#+property: header-args :cache no

#+macro: latest-export-date (eval (format-time-string "%F %T %z"))
#+macro: word-count (eval (count-words (point-min) (point-max)))

#+date: [2024-01-17 Wed 15:57]
#+HUGO_SERIES:
#+HUGO_CATEGORIES:
#+HUGO_TAGS: emacs dotfiles
#+EXPORT_FILE_NAME: jh-crafted-emacs.md

#+description: Custom Emacs Literate Configurations based on Spacemacs
#+options: ':t toc:2 num:t H:6
#+hugo_custom_front_matter: :toc false

#+EXPORT_HUGO_PANDOC_CITATIONS: t
#+cite_export: csl

#+hugo: more

*Last revised and exported on {{{latest-export-date}}} with a word
count of {{{word-count}}}.*

* Crated Emacs
* Define ~Custom-Layers~ (=layers/<jh-xxx>=)

** The =early-init.el=
:PROPERTIES:
:header-args+: :mkdirp yes :tangle early-init.el
:END:

#+begin_src elisp
;;; early-init.el --- Bootstrapping Crafted Emacs -*- lexical-binding: t; -*-

;;; Commentary:

;; Early init.
;; Set up deferred native compilation, dark-theme by default and GC opts.
;; Bootstrap Crafted Emacs early-init.

;;; Code:

;;; Defvar OS

(defvar *is-mac*     (eq system-type 'darwin))
(defvar *is-windows* (eq system-type 'windows-nt))
(defvar *is-cygwin*  (eq system-type 'cygwin))
(defvar *is-linux*   (or (eq system-type 'gnu/linux) (eq system-type 'linux)))
(defvar *is-wsl*     (eq (string-match "Linux.*microsoft.*WSL2.*Linux" (shell-command-to-string "uname -a")) 0))
(defvar *is-unix*    (or *is-linux* (eq system-type 'usg-unix-v) (eq system-type 'berkeley-unix)))
(defvar *is-android*  (eq system-type 'android))
(defvar *is-termux*
  (and
   (eq system-type 'android)
   (string-suffix-p "Android" (string-trim (shell-command-to-string "uname -a")))))

;;; Garbage Collection/Startup Message
(setq gc-cons-threshold most-positive-fixnum)

(defun my/post-startup ()
  "Sets GC threshold and displays load-time message."
  (setq gc-cons-threshold (* 20 1000 1000))
  (message "Emacs loaded (%s seconds)" (emacs-init-time "%.2f")))

(add-hook 'emacs-startup-hook #'my/post-startup)

;;; Native Compilation
(when (featurep 'native-compile)
  (setq native-comp-async-report-warnings-errors nil)
  (setq native-comp-deferred-compilation t)
  (add-to-list 'native-comp-eln-load-path
               (expand-file-name ".cache/eln-cache/"
                                 user-emacs-directory)))

;;; Crafted Emacs
(defconst my/crafted-emacs-branch "master" ;; ko
  "Branch to clone (does not update branch if already cloned).")

(defvar crafted-emacs-home
  (expand-file-name "crafted-emacs"
                    (file-name-directory load-file-name))
  "Crafted Emacs Home (overwritten in early-init.el).")

;; Ensure crafted-emacs-home exists
(make-directory crafted-emacs-home t)

(when (directory-empty-p crafted-emacs-home)
  (message "Cloning crafted-emacs ...")
  (shell-command-to-string
   ;; (format "git clone https://github.com/SystemCrafters/crafted-emacs -b %s %s"
   ;; (format "git clone https://github.com/jvdydev/crafted-emacs -b %s %s"
   (format "git clone https://github.com/junghan0611/crafted-emacs -b %s %s"
           my/crafted-emacs-branch
           crafted-emacs-home)))

(load (expand-file-name "modules/crafted-early-init-config.el"
                        crafted-emacs-home))

;;; is-android

;; (when *is-android*
;;   (message "Loading Android Emacs\n")
;;   (setenv "PATH" (format "%s:%s" "/data/data/com.termux/files/usr/bin" (getenv "PATH")))
;;   (setenv "LD_LIBRARY_PATH" (format "%s:%s" "/data/data/com.termux/files/usr/lib" (getenv "LD_LIBRARY_PATH")))
;;   (push "/data/data/com.termux/files/usr/bin" exec-path))

;;; Load a dark theme to avoid flashing on load
(if (member 'modus- (custom-available-themes))
    (load-theme 'modus-operandi t)
  (load-theme 'deeper-blue t))

;;; _
(provide 'early-init)
;;; early-init.el ends here
#+end_src
** The =init.el=
:PROPERTIES:
:header-args+: :mkdirp yes :tangle init.el
:END:

#+BEGIN_SRC elisp
;;; init.el --- Configuring Emacs -*- lexical-binding: t; -*-

;;; Commentary:

;; Init loading up Crafted Emacs.

;;; Code:

;;; Custom file

(customize-set-variable 'crafted-startup-inhibit-splash t)

(setq custom-file
      (expand-file-name ".cache/custom-vars.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file nil :nomessage))

;;; pinned-stable-packages

(defvar my/package-selected-packages-stable
  '(
    cider
    clojure-mode
    ))

(customize-set-variable 'package-pinned-packages
                        `(,@(mapcar
                             (lambda (package)
                               (cons package "stable"))
                             my/package-selected-packages-stable)))

;;; Bootstrap Crafted Emacs
(load (expand-file-name "modules/crafted-init-config.el" crafted-emacs-home))

(setq treesit-extra-load-path `(,(concat user-emacs-directory "tree-sitter/")))

;;; Configure packages to install

(require 'crafted-completion-packages)
(require 'crafted-evil-packages)
(require 'crafted-ide-packages)
(require 'crafted-lisp-packages)
(require 'crafted-org-packages)
(require 'crafted-ui-packages)
(require 'crafted-writing-packages)

;;;; Additional packages for custom modules

;; melpa first
(defvar my/package-selected-packages
  '(
    ;; nerd-icons nerd-icons-dired nerd-icons-completion kind-icon
    dash-functional
    treesit-auto

    which-key
    pcre2el
    doom-modeline
    winum
    avy
    string-edit-at-point
    expand-region
    goto-last-change
    imenu-list
    undo-fu
    tempel
    neotree
    revert-buffer-all

    popper
    shackle

    hydra
    major-mode-hydra ; contains pretty-hydra

    ;; judy-dev (also writing)
    let-alist
    flymake-aspell

    magit
    transient
    xref
    eldoc
    puni
    diff-hl
    tabspaces

    ;; Programming modes
    web-mode
    yaml-mode
    keycast
    apheleia
    awk-ts-mode
    bats-mode
    xclip
    promise
    exercism

    org-contrib
    breadcrumb
    side-hustle

    hungry-delete
    evil-org
    evil-surround
    evil-textobj-tree-sitter
    evil-escape

    citar
    citar-denote
    binder
    side-notes
    ))

(dolist (p my/package-selected-packages)
  (unless (package-installed-p p)
    (add-to-list 'package-selected-packages p 'append)))

;; judy-theme
(unless (member 'modus-vivendi (custom-available-themes))
  (add-to-list 'package-selected-packages 'modus-themes))

;; doom-themes
;; ct
;; auto-dim-other-buffers
;; rainbow-mode

(unless *is-termux*
  (add-to-list 'package-selected-packages 'nerd-icons)
  (add-to-list 'package-selected-packages 'nerd-icons-dired)
  (add-to-list 'package-selected-packages 'nerd-icons-completion)
  (add-to-list 'package-selected-packages 'kind-icon)
  )

;; judy-term
(if (member system-type '(windows-nt ms-dos))
    (add-to-list 'package-selected-packages 'powershell)
  (add-to-list 'package-selected-packages 'vterm))

;; (add-to-list 'package-selected-packages 'dockerfile-mode)
;; (add-to-list 'package-selected-packages 'glsl-mode)
;; (add-to-list 'package-selected-packages 'clang-format)
;; (add-to-list 'package-selected-packages 'cmake-mode)
;; (add-to-list 'package-selected-packages 'rust-mode)
;; (add-to-list 'package-selected-packages 'scad-mode)
;; (add-to-list 'package-selected-packages 'arduino-mode)
;; (add-to-list 'package-selected-packages 'arduino-cli-mode)

(unless (package-installed-p 'term-keys)
  (package-vc-install "https://github.com/junghan0611/term-keys"))

(unless (package-installed-p 'orgabilize)
  (package-vc-install "https://github.com/akirak/orgabilize.el"))

;; (unless (package-installed-p 'org-mode-crate)
;;   (package-vc-install "https://github.com/junghan0611/org-mode-crate"))

(unless (package-installed-p 'outli)
  (package-vc-install "https://github.com/jdtsmith/outli"))

;; (unless (package-installed-p 'outli)
;;   (package-vc-install "https://github.com/jdtsmith/outli"))

;;; Install packages
(package-install-selected-packages :noconfirm)

;;; Load configuration

(global-unset-key (kbd "M-c"))  ; unset capitalize-word

(require 'crafted-defaults-config)
(remove-hook 'text-mode-hook #'flyspell-mode)
(remove-hook 'prog-mode-hook #'flyspell-prog-mode)
(repeat-mode -1)

(require 'crafted-startup-config)
(require 'crafted-completion-config)
(require 'crafted-ui-config)

;; X (require 'crafted-evil-config)
(require 'core-evil)

(require 'crafted-ide-config)
(require 'crafted-lisp-config)
(require 'crafted-org-config)
(require 'crafted-writing-config)
(require 'crafted-package-config)
(require 'crafted-updates-config)
(require 'crafted-speedbar-config)

(customize-set-variable 'crafted-startup-module-list
                        '(crafted-startup-recentf crafted-startup-projects))

;; Custom modules
(require 'per-machine)
(require 'core-funcs)
(require 'judy-defaults)
(require 'judy-completion)
(require 'judy-evil)
(require 'judy-dev)

(require 'judy-org)
(require 'judy-term)
(require 'judy-fonts)
(require 'judy-theme)

(require 'judy-keys)

;; (require 'functions)
;; (require 'functions-1)

(require 'workspace)

(require 'hydra-config)

(require 'judy-transparency)
(judy-transparency-init 94)


(message "END")

;;; corkey bindings

(dolist (dir '("corkey" "corgi-bindings"))
  (push (expand-file-name dir user-emacs-directory) load-path))

(message "Loading corgi-bindings...")
(require 'corgi-bindings)
;; Corgi's keybinding system, which builds on top of Evil. See the manual, or
;; visit the key binding and signal files (with `SPC f e k', `SPC f e K', `SPC
;; f e s' `SPC f e S')
;; Put this last here, otherwise keybindings for commands that aren't loaded
;; yet won't be active.

(message "Loading corkey...")
(require 'corkey)
(corkey-mode 1)
;; Automatically pick up keybinding changes
(corkey/load-and-watch)

;;; Dashboard

(message "Loading Dashboard...")

(when (= 1 (length (tab-bar-tabs)))
  (tab-bar-new-tab)
  (tab-bar-new-tab)
  (tab-bar-new-tab)
  (tab-bar-rename-tab "Org" 1)
  (tab-bar-rename-tab "Note" 2)
  (tab-bar-rename-tab "Code" 3)
  (tab-bar-rename-tab "Emacs" 4)
  (tab-bar-select-tab 2)
  (dired denote-directory)
  (tab-bar-select-tab 3)
  (dired user-org-directory) ;; per-machine.el
  (tab-bar-select-tab 4)
  (find-file user-init-file)
  (delete-other-windows)
  (tab-bar-select-tab 1)
  ;; (delete-other-windows)
  ;; (org-agenda nil "a")
  )

;; install all language grammars hello

(setq treesit-auto-install 'prompt)
;; (crafted-ide-configure-tree-sitter)
;; install all language grammars, except protobuf

;;; _
(provide 'init)
;;; init.el ends here
#+END_SRC

** The custom-modules layer
[2023-12-24 Sun 07:50]
* Define User

** The =user-keys.el=
:PROPERTIES:
:header-args+: :mkdirp yes :tangle user-keys.el
:END:

#+BEGIN_SRC elisp
;;; -*- no-byte-compile: t -*-

;; This is your user keys file, here you can configure key bindings that will
;; get added to Corgi. You can also override Corgi's default bindings this way.
;;
;; Bindings here are nested, e.g. `("SPC" ("b" ("k" kill-buffer)))' means that
;; "space" followed by "b" and then "k" will invoke `M-x kill-buffer'.
;;
;; You can add a descriptions before the command, this will show up in a pop-up
;; when you press the prefix key and wait a bit. (This uses which-key)
;;
;; `("SPC" ("b" ("k" "Choose a buffer to kill" kill-buffer)))'
;;
;; Instead of a prefix key you can use a symbol like `normal' or `insert', which
;; designates the Evil state (what vim calls the mode). `global' means any
;; state, `normal|visual' means either normal or visual.
;;
;; Instead of a command like `kill-buffer' you can put a keyword like
;; `:eval/buffer'. This is called a "signal". In the `corgi-signals' (or
;; `user-signals') file these are bound to specific commands based on the major
;; mode. E.g. in Emacs Lisp `:eval/buffer' means `eval-buffer', whereas in
;; Clojure it means `cider-eval-buffer'.

(bindings
 ;; "global" bindings are always active regardless of Evil's "state" (= vim mode)
 ;; If you don't provide this the default is `normal'.
 (global
  )

 ;; Bindings for commands are usually only active in normal and visual state.
 (normal|visual
  ("SPC"
   ("!" "shell cmd" shell-command)
   ("b" "Buffer commands"
    ("m" "switch-to-messages-buffer" switch-to-messages-buffer)
    ("w" "Toggle read-only" read-only-mode))
   ("s" "Search commands"
    ("s" "consult-line" consult-line)
    ("S" "consult-line-symbol" consult-line-symbol)
    ("g" "consult-grep" consult-grep)
    ("d" "my/compleseus-search-dir" my/compleseus-search-dir)
    ("D" "spacemacs/compleseus-search-dir" spacemacs/compleseus-search-dir)
    ("f" "spacemacs/compleseus-search-auto" spacemacs/compleseus-search-auto)
    ("F" "my/compleseus-search-auto-hidden" my/compleseus/search-auto-hidden))
   ("g" "Git"
    ("c" "evilnc-comment-operator" evilnc-comment-operator)
    ("b" "Git blame" magit-blame))
   ("o" "Open"
    ("u" "Open URL at point" browse-url-at-point)
    ("s" "Edit string at point" string-edit-at-point))
   ;; ("0" "Select Treemacs" treemacs-select-window)
   ;; ("f"
   ;;  ("t" "Turn Treemacs on/off" treemacs)
   ;;  ("T" "Focus current file in file tree" treemacs-find-file))
   ("w" "Windows"
    ("r" "Rotate / swap windows" window-swap-states)
    ("s" "Rotate / swap windows" window-swap-states)
    )
   ("k" "+lisp"
    ("b" "forward-barf" puni-barf-forward)
    ("c" "convolute" puni-convolute)
    ("s" "forward-slurp" puni-slurp-forward)
    ("t" "transpose" puni-transpose)
    )
   )
  ("<backspace>" "Switch to previous buffer" corgi/switch-to-previous-buffer)
  ("." "consult-line" consult-line) ; 이게 편함.
  ("s" "Avy jump sneak" evil-avy-goto-char-timer)
  ) ;; end of (normal|visual)
 )
#+END_SRC
** The =user-signals.el=
:PROPERTIES:
:header-args+: :mkdirp yes :tangle user-signals.el
:END:

#+BEGIN_SRC elisp
;;; -*- no-byte-compile: t -*-

;; This is your user signals file, here you configure how certain signals are
;; handled in specific modes.

;; In this Corgi sample config we've included `js-comint' to demonstrate how
;; that works. This package allows evaluating JavaScript directly from a buffer.
;; Evaluating the expression before the cursor is done in Corgi with `, RET' (or
;; `, e e'), by telling Corgi that in JS buffers this means `js-send-last-sexp'
;; we get the same bindings there.
;;
;; If you prefer some other key binding for "eval", then you can do that in
;; `user-keys.el', and your new binding will do the right thing regardless of
;; the language/mode you are in.

((js-mode ( :eval/last-sexp js-send-last-sexp
            :eval/buffer js-send-buffer
            :eval/region js-send-region
            :repl/toggle js-comint-start-or-switch-to-repl)))

#+END_SRC

* Local Variables

-----
# Local Variables:
# fill-column: 80
# eval: (auto-fill-mode 1)
# End:
